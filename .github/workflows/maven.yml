# # This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# # This workflow uses actions that are not certified by GitHub.
# # They are provided by a third-party and are governed by
# # separate terms of service, privacy policy, and support
# # documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
#     - name: Build with Maven
#       run: mvn -B package --file pom.xml


    - name: Get Current Version
      id: get_version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Current Version: $VERSION"
        IFS='.' read -r -a VERSION_PARTS <<< "${VERSION}"
        BASE_VERSION=$(echo $VERSION | awk -F'-' '{print $1}')
        QUALIFIER=$(echo $VERSION | awk -F'-' '{print $2}')

        echo "Base Version: $BASE_VERSION"
        echo "Qualifier: $QUALIFIER"

        # MAJOR=${VERSION_PARTS[0]}
        # MINOR=${VERSION_PARTS[1]}
        # PATCH=${VERSION_PARTS[2]}
        # if [[ $MINOR == *"-SNAPSHOT" ]]; then
        #   MINOR = 0
        # fi
        # NEW_PATCH=$((PATCH + 1))
        # NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
        # mvn versions:set -DnewVersion=${NEW_VERSION}
        # IVERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        # echo "Current Version: $IVERSION"
    

    - name: Build with Maven
      run: mvn -B package --file pom.xml


#     # - name: Update dependency graph
#     #   uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
